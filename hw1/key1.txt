HomeWork

Exercise 1
1.
e m a c s e x e r 1 . h t m l Enter
2.
C-S P U B L I C ENTER
ESC-F
3.
C-S L A B O R A T O R Y ENTER
M-B
4.
C-S S E L F - R E F ENTER
M-B
5.
C-S A R R O W ENTER
M-B
6.
C-E
7.
C-A
8. 9.
No, I didn't use any arrow keys
10.
C-X C-C

Exercise 2
1.
e m a c s e x e r 2 . h t m l Enter
2.
M-G 18
C-K
3.
C-S <!-- ENTER
C-A
C-K
4.
C-S M-P ENTER
C-A
M-K
DOWN
C-K
5.  int mask = (0x1<<31)>>maskDiff;
C-S M-P DEL DEL DEL BACKSPACE BACKSPACE BACKSPACE
C-S <!-- C-A C-K

C-X C-C Y

Exercise 3
1.
e m a c s e x e r 3 . h t m l ENTER
2.
C-S A ENTER
C-F DEL 3 7
3.
C-S UTF
M-right M-right BACKSPACE
A S C I I
4.
C-S < - o l
C-E ENTER
5.
C-X C-C Y

Exercise 4
//general idea: goto the appropriate line # indicated by 
the diff file, and yank those text back 

1.
cat exer2.html exer2.diff >exer4.html
2.
E M A C S SPACE E X E R 4 . H T M L
3.
C-R > C-R
C-R <!- ENTER C-@ C-S - > M-W
C-S L O G SPACE L I N E S ENTER C-Y
4.
C-S <!- ENTER LEFT LEFT C-@ C-S > M-W M-G G 18 C-Y
C-S M-P C-S LEFT LEFT C-@ DOWN DOWN C-E M-W M-G G 303
C-Y

C-S <!- C-S C-S LEFT LEFT C-@ C-E M-W M-G G 93 C-Y
5.
C-S --- C-@ M-> C-W
6.
C-shift--
7.
- - > C-R C-R ENTER UP <--
8.
M-< M-% < o l > < O L > y y y y y y y
(there are 7 occurrences)
9.
C-X C-C y y
diff -u exer1.html exer4.html >exer4.diff

Exercise 5
1.
E M A C S
M-X M K D I R ENTER J U N K ENTER
C-X C-F J U N K ENTER
C-X C-F h e l l o . c ENTER
(Right click to paste the file)

3.
M-X compile ENTER
BACKSPACE BACKSPACE BACKSPACE BACKSPACE BACKSPACE BACKSPACE BACKSPACE BACKSPACE
G C C SPACE - O SPACE H E L L O - O U T SPACE H E L L O . C ENTER

4.
M-x c o m p i l e Enter
UP . / h e l l o Enter
C-x o Enter
C-@ M-> M-W 
//copy the output file 

5.
//paste to this file 
E M A C S H E L L O - O U T ENTER
C-@ M-> M-W
C-X 2 (then choose this file) ENTER
M-> C-Y
C-X C-S

-
-*- mode: compilation; default-directory: "~/Desktop/junk/" -*-
Compilation started at Sun Apr  2 15:31:24

./hello-out
#include <stdio.h>
int
main (void)
{
  char n = '\n';
  char b = '\\';
  char q = '"';
  char const *p = "#include <stdio.h>%cint%cmain (void)%c{%c  char n = '%cn';%c  char b\
 = '%c%c';%c  char q = '%c';%c  char const *p = %c%s%c;%c  printf (p, n, n, n, n, b, n,\
 b, b, n, q, n, q, p, q, n, n, n, n);%c  return 0;%c}%c";
  printf (p, n, n, n, n, b, n, b, b, n, q, n, q, p, q, n, n, n, n);
  return 0;
}

Compilation finished at Sun Apr  2 15:31:24


Exericse 6
1.
C-X b ENTER
2.
( R A N D O M ) C-J
3.
( s e t q SPACE x ( r a n d o m ) )
( s e t q SPACE y ( r a n d o m ) )
( * SPACE x SPACE y)

4.
944175776713243260
x is a negative number and y is positive. the result is 
not mathematically correct

5.
M - : ( * SPACE x SPACE y )
944175776713243260 (#o64323055672041275174, #xd1a62ddd0857a7c)
still this number

6.
They are not truly random in mathematically sense
Because for a number to be truly random, 
it cannot be limited to the size of memory or the number of bytes 
that my processors have.
Also these numbers are generated by an algorithm that might get a
number according to time, or randomly access a location in memory, so
there might have some chance to reproduce the result 
under same circumstances and it is not generally random.

7.
Randomness means only if 
both of the random number is below the maximum byte of machine, 
so only if overflow does not happen.
Assume our machine is 32-bit, then the maximum bits that result can hold is 
32 bits, which is 2^32. Then we do integration under the curve x*y=2^32
y=2^32/x. Integral of y is 2^32*ln(x), as x from 2^0 to 2^32.
Because multiplication of signed int is xy%(2^32), there is no need to consider 
the positive and negative.  
This integral will be divided by 2^64, which is the largest number that
the product can be, and because it is truly random, the sample space should 
be uniformly distributed. 
My solution is around 5.164*10^-9.  
