Week 6 Lab

1. Preparation
$export PATH=/usr/local/cs/bin:$PATH
$which sort
and will get /usr/local/cs/bin/sort as the sort program that we need

then 
sort --version will result in 8.27, a "new-enough" version. 

2.Generate floats as test data
if we need 10,000,000 floats, each of which takes 4 bytes, will result in 
a file as large as 40000000
od -An -f -N 40000000 < /dev/urandom | tr -s ' ' '\n' > random.txt
Then goto first line of the file to delete the first empty line

-An specifies input offset base should not be written
-f same as -t fF, select floats
-N specifies the number of numbers needed

3. Comparisons 

a. without parallel option 
[classhen@lnxsrv07 ~/35l/hw6]$ time -p sort -g random.txt > /dev/null
real 21.61
user 115.87
sys 0.46

b.one threads
[classhen@lnxsrv07 ~/35l/hw6]$ time -p sort -g --parallel=1 random.txt > /dev/null
real 106.58
user 106.40
sys 0.19

c. two threads
[classhen@lnxsrv07 ~/35l/hw6]$ time -p sort -g --parallel=2 random.txt > /dev/null
real 58.12
user 111.08
sys 0.22

d. four threads
[classhen@lnxsrv07 ~/35l/hw6]$ time -p sort -g --parallel=4 random.txt > /dev/null
real 34.65
user 115.54
sys 0.34

e. eight threads
[classhen@lnxsrv07 ~/35l/hw6]$  time -p sort -g --parallel=8 random.txt > /dev/null
real 21.20
user 115.64
sys 0.46

It's obvious that the more threads in parallel, the faster the sorting algorithm runs
